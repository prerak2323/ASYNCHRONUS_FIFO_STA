/* Generated by Yosys 0.45+106 (git sha1 982fade0d, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3) */

module DFF(clk, d, wen, q);
  wire _0_;
  wire _1_;
  input clk;
  wire clk;
  input d;
  wire d;
  output q;
  wire q;
  input wen;
  wire wen;
  MUX2_X1 _2_ (
    .A(q),
    .B(d),
    .S(wen),
    .Z(_0_)
  );
  DFF_X1 _3_ (
    .CK(clk),
    .D(_0_),
    .Q(q),
    .QN(_1_)
  );
endmodule

module fifo_memory(wclk_en, full, wclk, data_in, raddr, waddr, data_out);
  wire _0_;
  input [7:0] data_in;
  wire [7:0] data_in;
  output [7:0] data_out;
  wire [7:0] data_out;
  input full;
  wire full;
  input [3:0] raddr;
  wire [3:0] raddr;
  input [3:0] waddr;
  wire [3:0] waddr;
  input wclk;
  wire wclk;
  input wclk_en;
  wire wclk_en;
  wire wen;
  INV_X1 _1_ (
    .A(wclk_en),
    .ZN(_0_)
  );
  NOR2_X1 _2_ (
    .A1(_0_),
    .A2(full),
    .ZN(wen)
  );
  register_bank fifo (
    .clk(wclk),
    .data_in(data_in),
    .data_out(data_out),
    .raddr(raddr),
    .waddr(waddr),
    .wen(wen)
  );
endmodule

module mux16to1_8bit(sel, in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, in13, in14, in15, out);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  input [7:0] in0;
  wire [7:0] in0;
  input [7:0] in1;
  wire [7:0] in1;
  input [7:0] in10;
  wire [7:0] in10;
  input [7:0] in11;
  wire [7:0] in11;
  input [7:0] in12;
  wire [7:0] in12;
  input [7:0] in13;
  wire [7:0] in13;
  input [7:0] in14;
  wire [7:0] in14;
  input [7:0] in15;
  wire [7:0] in15;
  input [7:0] in2;
  wire [7:0] in2;
  input [7:0] in3;
  wire [7:0] in3;
  input [7:0] in4;
  wire [7:0] in4;
  input [7:0] in5;
  wire [7:0] in5;
  input [7:0] in6;
  wire [7:0] in6;
  input [7:0] in7;
  wire [7:0] in7;
  input [7:0] in8;
  wire [7:0] in8;
  input [7:0] in9;
  wire [7:0] in9;
  output [7:0] out;
  wire [7:0] out;
  input [3:0] sel;
  wire [3:0] sel;
  INV_X1 _224_ (
    .A(in0[2]),
    .ZN(_000_)
  );
  INV_X1 _225_ (
    .A(in0[1]),
    .ZN(_001_)
  );
  INV_X1 _226_ (
    .A(in2[2]),
    .ZN(_002_)
  );
  INV_X1 _227_ (
    .A(in2[1]),
    .ZN(_003_)
  );
  INV_X1 _228_ (
    .A(in3[0]),
    .ZN(_004_)
  );
  INV_X1 _229_ (
    .A(in5[5]),
    .ZN(_005_)
  );
  INV_X1 _230_ (
    .A(in5[4]),
    .ZN(_006_)
  );
  INV_X1 _231_ (
    .A(in7[6]),
    .ZN(_007_)
  );
  INV_X1 _232_ (
    .A(in8[5]),
    .ZN(_008_)
  );
  INV_X1 _233_ (
    .A(in9[1]),
    .ZN(_009_)
  );
  INV_X1 _234_ (
    .A(in11[0]),
    .ZN(_010_)
  );
  INV_X1 _235_ (
    .A(in15[6]),
    .ZN(_011_)
  );
  INV_X1 _236_ (
    .A(in15[2]),
    .ZN(_012_)
  );
  INV_X1 _237_ (
    .A(sel[2]),
    .ZN(_013_)
  );
  INV_X1 _238_ (
    .A(sel[1]),
    .ZN(_014_)
  );
  INV_X1 _239_ (
    .A(sel[0]),
    .ZN(_015_)
  );
  INV_X1 _240_ (
    .A(in12[7]),
    .ZN(_016_)
  );
  NOR2_X1 _241_ (
    .A1(sel[1]),
    .A2(sel[0]),
    .ZN(_017_)
  );
  NOR2_X1 _242_ (
    .A1(sel[2]),
    .A2(sel[3]),
    .ZN(_018_)
  );
  AND2_X1 _243_ (
    .A1(_017_),
    .A2(_018_),
    .ZN(_019_)
  );
  NAND2_X1 _244_ (
    .A1(_017_),
    .A2(_018_),
    .ZN(_020_)
  );
  NAND2_X1 _245_ (
    .A1(in0[6]),
    .A2(_019_),
    .ZN(_021_)
  );
  NOR2_X1 _246_ (
    .A1(_013_),
    .A2(sel[3]),
    .ZN(_022_)
  );
  OR2_X1 _247_ (
    .A1(_013_),
    .A2(sel[3]),
    .ZN(_023_)
  );
  AND2_X1 _248_ (
    .A1(_017_),
    .A2(_022_),
    .ZN(_024_)
  );
  NAND2_X1 _249_ (
    .A1(_017_),
    .A2(_022_),
    .ZN(_025_)
  );
  NOR2_X1 _250_ (
    .A1(sel[1]),
    .A2(_015_),
    .ZN(_026_)
  );
  NAND2_X1 _251_ (
    .A1(_014_),
    .A2(sel[0]),
    .ZN(_027_)
  );
  NOR2_X1 _252_ (
    .A1(_023_),
    .A2(_027_),
    .ZN(_028_)
  );
  NAND2_X1 _253_ (
    .A1(_022_),
    .A2(_026_),
    .ZN(_029_)
  );
  NAND2_X1 _254_ (
    .A1(_013_),
    .A2(sel[3]),
    .ZN(_030_)
  );
  NOR2_X1 _255_ (
    .A1(_027_),
    .A2(_030_),
    .ZN(_031_)
  );
  OR2_X1 _256_ (
    .A1(_027_),
    .A2(_030_),
    .ZN(_032_)
  );
  NOR2_X1 _257_ (
    .A1(_014_),
    .A2(sel[0]),
    .ZN(_033_)
  );
  NAND2_X1 _258_ (
    .A1(sel[1]),
    .A2(_015_),
    .ZN(_034_)
  );
  NOR2_X1 _259_ (
    .A1(_030_),
    .A2(_034_),
    .ZN(_035_)
  );
  OR2_X1 _260_ (
    .A1(_030_),
    .A2(_034_),
    .ZN(_036_)
  );
  NAND2_X1 _261_ (
    .A1(sel[1]),
    .A2(sel[0]),
    .ZN(_037_)
  );
  NOR2_X1 _262_ (
    .A1(_030_),
    .A2(_037_),
    .ZN(_038_)
  );
  OR2_X1 _263_ (
    .A1(_030_),
    .A2(_037_),
    .ZN(_039_)
  );
  AND2_X1 _264_ (
    .A1(sel[2]),
    .A2(sel[3]),
    .ZN(_040_)
  );
  NAND2_X1 _265_ (
    .A1(sel[2]),
    .A2(sel[3]),
    .ZN(_041_)
  );
  AND2_X1 _266_ (
    .A1(_017_),
    .A2(_040_),
    .ZN(_042_)
  );
  NAND2_X1 _267_ (
    .A1(_017_),
    .A2(_040_),
    .ZN(_043_)
  );
  NOR3_X1 _268_ (
    .A1(sel[1]),
    .A2(_015_),
    .A3(_041_),
    .ZN(_044_)
  );
  NAND3_X1 _269_ (
    .A1(_014_),
    .A2(sel[0]),
    .A3(_040_),
    .ZN(_045_)
  );
  NOR3_X1 _270_ (
    .A1(_014_),
    .A2(sel[0]),
    .A3(_041_),
    .ZN(_046_)
  );
  NAND2_X1 _271_ (
    .A1(_033_),
    .A2(_040_),
    .ZN(_047_)
  );
  NAND2_X1 _272_ (
    .A1(in14[6]),
    .A2(_046_),
    .ZN(_048_)
  );
  OAI211_X1 _273_ (
    .A(_045_),
    .B(_048_),
    .C1(_046_),
    .C2(_011_),
    .ZN(_049_)
  );
  AOI21_X1 _274_ (
    .A(_038_),
    .B1(_042_),
    .B2(in12[6]),
    .ZN(_050_)
  );
  OAI211_X1 _275_ (
    .A(_043_),
    .B(_049_),
    .C1(_045_),
    .C2(in13[6]),
    .ZN(_051_)
  );
  OAI21_X1 _276_ (
    .A(_036_),
    .B1(_039_),
    .B2(in11[6]),
    .ZN(_052_)
  );
  AOI21_X1 _277_ (
    .A(_052_),
    .B1(_051_),
    .B2(_050_),
    .ZN(_053_)
  );
  AOI211_X1 _278_ (
    .A(_031_),
    .B(_053_),
    .C1(_035_),
    .C2(in10[6]),
    .ZN(_054_)
  );
  NOR3_X1 _279_ (
    .A1(sel[1]),
    .A2(sel[0]),
    .A3(_030_),
    .ZN(_055_)
  );
  NAND3_X1 _280_ (
    .A1(_013_),
    .A2(sel[3]),
    .A3(_017_),
    .ZN(_056_)
  );
  OAI21_X1 _281_ (
    .A(_056_),
    .B1(_032_),
    .B2(in9[6]),
    .ZN(_057_)
  );
  NOR2_X1 _282_ (
    .A1(_023_),
    .A2(_037_),
    .ZN(_058_)
  );
  OR2_X1 _283_ (
    .A1(_023_),
    .A2(_037_),
    .ZN(_059_)
  );
  AOI21_X1 _284_ (
    .A(_058_),
    .B1(_055_),
    .B2(in8[6]),
    .ZN(_060_)
  );
  OAI21_X1 _285_ (
    .A(_060_),
    .B1(_057_),
    .B2(_054_),
    .ZN(_061_)
  );
  NOR2_X1 _286_ (
    .A1(_023_),
    .A2(_034_),
    .ZN(_062_)
  );
  NAND2_X1 _287_ (
    .A1(_022_),
    .A2(_033_),
    .ZN(_063_)
  );
  AOI21_X1 _288_ (
    .A(_062_),
    .B1(_058_),
    .B2(_007_),
    .ZN(_064_)
  );
  NOR2_X1 _289_ (
    .A1(in5[6]),
    .A2(_029_),
    .ZN(_065_)
  );
  AOI221_X1 _290_ (
    .A(_028_),
    .B1(_061_),
    .B2(_064_),
    .C1(_062_),
    .C2(in6[6]),
    .ZN(_066_)
  );
  OR3_X1 _291_ (
    .A1(_024_),
    .A2(_065_),
    .A3(_066_),
    .ZN(_067_)
  );
  NOR3_X1 _292_ (
    .A1(sel[2]),
    .A2(sel[3]),
    .A3(_037_),
    .ZN(_068_)
  );
  NAND3_X1 _293_ (
    .A1(sel[1]),
    .A2(sel[0]),
    .A3(_018_),
    .ZN(_069_)
  );
  AOI21_X1 _294_ (
    .A(_068_),
    .B1(_024_),
    .B2(in4[6]),
    .ZN(_070_)
  );
  AND2_X1 _295_ (
    .A1(_018_),
    .A2(_033_),
    .ZN(_071_)
  );
  NAND2_X1 _296_ (
    .A1(_018_),
    .A2(_033_),
    .ZN(_072_)
  );
  OAI21_X1 _297_ (
    .A(_072_),
    .B1(_069_),
    .B2(in3[6]),
    .ZN(_073_)
  );
  AOI21_X1 _298_ (
    .A(_073_),
    .B1(_070_),
    .B2(_067_),
    .ZN(_074_)
  );
  AND2_X1 _299_ (
    .A1(_018_),
    .A2(_026_),
    .ZN(_075_)
  );
  NAND2_X1 _300_ (
    .A1(_018_),
    .A2(_026_),
    .ZN(_076_)
  );
  AOI211_X1 _301_ (
    .A(_074_),
    .B(_075_),
    .C1(in2[6]),
    .C2(_071_),
    .ZN(_077_)
  );
  OAI21_X1 _302_ (
    .A(_020_),
    .B1(_076_),
    .B2(in1[6]),
    .ZN(_078_)
  );
  OAI21_X1 _303_ (
    .A(_021_),
    .B1(_077_),
    .B2(_078_),
    .ZN(out[6])
  );
  NAND2_X1 _304_ (
    .A1(in0[5]),
    .A2(_019_),
    .ZN(_079_)
  );
  MUX2_X1 _305_ (
    .A(in15[5]),
    .B(in14[5]),
    .S(_046_),
    .Z(_080_)
  );
  AND2_X1 _306_ (
    .A1(in13[5]),
    .A2(_044_),
    .ZN(_081_)
  );
  AOI21_X1 _307_ (
    .A(_081_),
    .B1(_080_),
    .B2(_045_),
    .ZN(_082_)
  );
  AOI21_X1 _308_ (
    .A(_038_),
    .B1(_042_),
    .B2(in12[5]),
    .ZN(_083_)
  );
  OAI21_X1 _309_ (
    .A(_083_),
    .B1(_082_),
    .B2(_042_),
    .ZN(_084_)
  );
  AOI21_X1 _310_ (
    .A(_031_),
    .B1(_035_),
    .B2(in10[5]),
    .ZN(_085_)
  );
  OAI211_X1 _311_ (
    .A(_036_),
    .B(_084_),
    .C1(_039_),
    .C2(in11[5]),
    .ZN(_086_)
  );
  OAI21_X1 _312_ (
    .A(_056_),
    .B1(_032_),
    .B2(in9[5]),
    .ZN(_087_)
  );
  AOI21_X1 _313_ (
    .A(_087_),
    .B1(_086_),
    .B2(_085_),
    .ZN(_088_)
  );
  OAI21_X1 _314_ (
    .A(_059_),
    .B1(_056_),
    .B2(_008_),
    .ZN(_089_)
  );
  OAI221_X1 _315_ (
    .A(_063_),
    .B1(_088_),
    .B2(_089_),
    .C1(_059_),
    .C2(in7[5]),
    .ZN(_090_)
  );
  NAND2_X1 _316_ (
    .A1(in6[5]),
    .A2(_062_),
    .ZN(_091_)
  );
  AOI21_X1 _317_ (
    .A(_028_),
    .B1(_090_),
    .B2(_091_),
    .ZN(_092_)
  );
  OAI21_X1 _318_ (
    .A(_025_),
    .B1(_029_),
    .B2(_005_),
    .ZN(_093_)
  );
  OAI221_X1 _319_ (
    .A(_069_),
    .B1(_092_),
    .B2(_093_),
    .C1(_025_),
    .C2(in4[5]),
    .ZN(_094_)
  );
  NAND2_X1 _320_ (
    .A1(in3[5]),
    .A2(_068_),
    .ZN(_095_)
  );
  AOI21_X1 _321_ (
    .A(_071_),
    .B1(_094_),
    .B2(_095_),
    .ZN(_096_)
  );
  AOI211_X1 _322_ (
    .A(_075_),
    .B(_096_),
    .C1(in2[5]),
    .C2(_071_),
    .ZN(_097_)
  );
  OAI21_X1 _323_ (
    .A(_020_),
    .B1(_076_),
    .B2(in1[5]),
    .ZN(_098_)
  );
  OAI21_X1 _324_ (
    .A(_079_),
    .B1(_097_),
    .B2(_098_),
    .ZN(out[5])
  );
  NAND2_X1 _325_ (
    .A1(in0[4]),
    .A2(_019_),
    .ZN(_099_)
  );
  NAND2_X1 _326_ (
    .A1(in3[4]),
    .A2(_068_),
    .ZN(_100_)
  );
  NAND2_X1 _327_ (
    .A1(in11[4]),
    .A2(_038_),
    .ZN(_101_)
  );
  MUX2_X1 _328_ (
    .A(in15[4]),
    .B(in14[4]),
    .S(_046_),
    .Z(_102_)
  );
  AND2_X1 _329_ (
    .A1(in13[4]),
    .A2(_044_),
    .ZN(_103_)
  );
  AOI211_X1 _330_ (
    .A(_042_),
    .B(_103_),
    .C1(_102_),
    .C2(_045_),
    .ZN(_104_)
  );
  OAI21_X1 _331_ (
    .A(_039_),
    .B1(_043_),
    .B2(in12[4]),
    .ZN(_105_)
  );
  OAI21_X1 _332_ (
    .A(_101_),
    .B1(_104_),
    .B2(_105_),
    .ZN(_106_)
  );
  AND2_X1 _333_ (
    .A1(in10[4]),
    .A2(_035_),
    .ZN(_107_)
  );
  AOI211_X1 _334_ (
    .A(_031_),
    .B(_107_),
    .C1(_106_),
    .C2(_036_),
    .ZN(_108_)
  );
  NOR2_X1 _335_ (
    .A1(in9[4]),
    .A2(_032_),
    .ZN(_109_)
  );
  OAI21_X1 _336_ (
    .A(_056_),
    .B1(_108_),
    .B2(_109_),
    .ZN(_110_)
  );
  OAI21_X1 _337_ (
    .A(_059_),
    .B1(_056_),
    .B2(in8[4]),
    .ZN(_111_)
  );
  INV_X1 _338_ (
    .A(_111_),
    .ZN(_112_)
  );
  AOI22_X1 _339_ (
    .A1(in7[4]),
    .A2(_058_),
    .B1(_110_),
    .B2(_112_),
    .ZN(_113_)
  );
  AOI21_X1 _340_ (
    .A(_028_),
    .B1(_062_),
    .B2(in6[4]),
    .ZN(_114_)
  );
  OAI21_X1 _341_ (
    .A(_114_),
    .B1(_113_),
    .B2(_062_),
    .ZN(_115_)
  );
  AOI21_X1 _342_ (
    .A(_024_),
    .B1(_028_),
    .B2(_006_),
    .ZN(_116_)
  );
  AOI22_X1 _343_ (
    .A1(in4[4]),
    .A2(_024_),
    .B1(_115_),
    .B2(_116_),
    .ZN(_117_)
  );
  OAI21_X1 _344_ (
    .A(_100_),
    .B1(_117_),
    .B2(_068_),
    .ZN(_118_)
  );
  AND2_X1 _345_ (
    .A1(in2[4]),
    .A2(_071_),
    .ZN(_119_)
  );
  AOI211_X1 _346_ (
    .A(_075_),
    .B(_119_),
    .C1(_118_),
    .C2(_072_),
    .ZN(_120_)
  );
  OAI21_X1 _347_ (
    .A(_020_),
    .B1(_076_),
    .B2(in1[4]),
    .ZN(_121_)
  );
  OAI21_X1 _348_ (
    .A(_099_),
    .B1(_120_),
    .B2(_121_),
    .ZN(out[4])
  );
  NAND2_X1 _349_ (
    .A1(in0[3]),
    .A2(_019_),
    .ZN(_122_)
  );
  NOR2_X1 _350_ (
    .A1(in8[3]),
    .A2(_056_),
    .ZN(_123_)
  );
  OR2_X1 _351_ (
    .A1(in15[3]),
    .A2(_046_),
    .ZN(_124_)
  );
  OAI211_X1 _352_ (
    .A(_045_),
    .B(_124_),
    .C1(_047_),
    .C2(in14[3]),
    .ZN(_125_)
  );
  AOI21_X1 _353_ (
    .A(_042_),
    .B1(_044_),
    .B2(in13[3]),
    .ZN(_126_)
  );
  NOR2_X1 _354_ (
    .A1(in12[3]),
    .A2(_043_),
    .ZN(_127_)
  );
  AOI21_X1 _355_ (
    .A(_035_),
    .B1(_038_),
    .B2(in11[3]),
    .ZN(_128_)
  );
  INV_X1 _356_ (
    .A(_128_),
    .ZN(_129_)
  );
  AOI211_X1 _357_ (
    .A(_038_),
    .B(_127_),
    .C1(_126_),
    .C2(_125_),
    .ZN(_130_)
  );
  OAI221_X1 _358_ (
    .A(_032_),
    .B1(_129_),
    .B2(_130_),
    .C1(_036_),
    .C2(in10[3]),
    .ZN(_131_)
  );
  AOI21_X1 _359_ (
    .A(_055_),
    .B1(_031_),
    .B2(in9[3]),
    .ZN(_132_)
  );
  AND2_X1 _360_ (
    .A1(in7[3]),
    .A2(_058_),
    .ZN(_133_)
  );
  AOI211_X1 _361_ (
    .A(_058_),
    .B(_123_),
    .C1(_131_),
    .C2(_132_),
    .ZN(_134_)
  );
  OAI21_X1 _362_ (
    .A(_063_),
    .B1(_133_),
    .B2(_134_),
    .ZN(_135_)
  );
  AOI21_X1 _363_ (
    .A(_028_),
    .B1(_062_),
    .B2(in6[3]),
    .ZN(_136_)
  );
  OAI21_X1 _364_ (
    .A(_025_),
    .B1(_029_),
    .B2(in5[3]),
    .ZN(_137_)
  );
  AOI21_X1 _365_ (
    .A(_137_),
    .B1(_136_),
    .B2(_135_),
    .ZN(_138_)
  );
  AOI21_X1 _366_ (
    .A(_138_),
    .B1(_024_),
    .B2(in4[3]),
    .ZN(_139_)
  );
  OAI21_X1 _367_ (
    .A(_072_),
    .B1(_069_),
    .B2(in3[3]),
    .ZN(_140_)
  );
  AOI21_X1 _368_ (
    .A(_140_),
    .B1(_139_),
    .B2(_069_),
    .ZN(_141_)
  );
  AOI211_X1 _369_ (
    .A(_075_),
    .B(_141_),
    .C1(in2[3]),
    .C2(_071_),
    .ZN(_142_)
  );
  OAI21_X1 _370_ (
    .A(_020_),
    .B1(_076_),
    .B2(in1[3]),
    .ZN(_143_)
  );
  OAI21_X1 _371_ (
    .A(_122_),
    .B1(_142_),
    .B2(_143_),
    .ZN(out[3])
  );
  NAND4_X1 _372_ (
    .A1(in14[2]),
    .A2(sel[1]),
    .A3(_015_),
    .A4(_040_),
    .ZN(_144_)
  );
  OAI211_X1 _373_ (
    .A(_045_),
    .B(_144_),
    .C1(_046_),
    .C2(_012_),
    .ZN(_145_)
  );
  OAI211_X1 _374_ (
    .A(_043_),
    .B(_145_),
    .C1(_045_),
    .C2(in13[2]),
    .ZN(_146_)
  );
  AOI21_X1 _375_ (
    .A(_038_),
    .B1(_042_),
    .B2(in12[2]),
    .ZN(_147_)
  );
  OAI21_X1 _376_ (
    .A(_036_),
    .B1(_039_),
    .B2(in11[2]),
    .ZN(_148_)
  );
  AOI21_X1 _377_ (
    .A(_148_),
    .B1(_147_),
    .B2(_146_),
    .ZN(_149_)
  );
  AOI211_X1 _378_ (
    .A(_031_),
    .B(_149_),
    .C1(_035_),
    .C2(in10[2]),
    .ZN(_150_)
  );
  OAI21_X1 _379_ (
    .A(_056_),
    .B1(_032_),
    .B2(in9[2]),
    .ZN(_151_)
  );
  AOI21_X1 _380_ (
    .A(_058_),
    .B1(_055_),
    .B2(in8[2]),
    .ZN(_152_)
  );
  OAI21_X1 _381_ (
    .A(_152_),
    .B1(_151_),
    .B2(_150_),
    .ZN(_153_)
  );
  OAI211_X1 _382_ (
    .A(_063_),
    .B(_153_),
    .C1(in7[2]),
    .C2(_059_),
    .ZN(_154_)
  );
  NAND2_X1 _383_ (
    .A1(in6[2]),
    .A2(_062_),
    .ZN(_155_)
  );
  AOI21_X1 _384_ (
    .A(_028_),
    .B1(_154_),
    .B2(_155_),
    .ZN(_156_)
  );
  AOI211_X1 _385_ (
    .A(_024_),
    .B(_156_),
    .C1(_028_),
    .C2(in5[2]),
    .ZN(_157_)
  );
  OAI21_X1 _386_ (
    .A(_069_),
    .B1(_025_),
    .B2(in4[2]),
    .ZN(_158_)
  );
  AOI21_X1 _387_ (
    .A(_071_),
    .B1(_068_),
    .B2(in3[2]),
    .ZN(_159_)
  );
  OAI21_X1 _388_ (
    .A(_159_),
    .B1(_158_),
    .B2(_157_),
    .ZN(_160_)
  );
  AOI21_X1 _389_ (
    .A(_075_),
    .B1(_071_),
    .B2(_002_),
    .ZN(_161_)
  );
  AOI221_X1 _390_ (
    .A(_019_),
    .B1(_160_),
    .B2(_161_),
    .C1(_075_),
    .C2(in1[2]),
    .ZN(_162_)
  );
  AOI21_X1 _391_ (
    .A(_162_),
    .B1(_019_),
    .B2(_000_),
    .ZN(out[2])
  );
  MUX2_X1 _392_ (
    .A(in15[1]),
    .B(in14[1]),
    .S(_046_),
    .Z(_163_)
  );
  AND2_X1 _393_ (
    .A1(in13[1]),
    .A2(_044_),
    .ZN(_164_)
  );
  AOI21_X1 _394_ (
    .A(_164_),
    .B1(_163_),
    .B2(_045_),
    .ZN(_165_)
  );
  AOI21_X1 _395_ (
    .A(_038_),
    .B1(_042_),
    .B2(in12[1]),
    .ZN(_166_)
  );
  OAI21_X1 _396_ (
    .A(_166_),
    .B1(_165_),
    .B2(_042_),
    .ZN(_167_)
  );
  OAI21_X1 _397_ (
    .A(_167_),
    .B1(_039_),
    .B2(in11[1]),
    .ZN(_168_)
  );
  OAI21_X1 _398_ (
    .A(_032_),
    .B1(_036_),
    .B2(in10[1]),
    .ZN(_169_)
  );
  AOI21_X1 _399_ (
    .A(_169_),
    .B1(_168_),
    .B2(_036_),
    .ZN(_170_)
  );
  OAI21_X1 _400_ (
    .A(_056_),
    .B1(_032_),
    .B2(_009_),
    .ZN(_171_)
  );
  OAI221_X1 _401_ (
    .A(_059_),
    .B1(_170_),
    .B2(_171_),
    .C1(_056_),
    .C2(in8[1]),
    .ZN(_172_)
  );
  AOI21_X1 _402_ (
    .A(_062_),
    .B1(_058_),
    .B2(in7[1]),
    .ZN(_173_)
  );
  OAI21_X1 _403_ (
    .A(_029_),
    .B1(_063_),
    .B2(in6[1]),
    .ZN(_174_)
  );
  AOI21_X1 _404_ (
    .A(_174_),
    .B1(_173_),
    .B2(_172_),
    .ZN(_175_)
  );
  AOI211_X1 _405_ (
    .A(_024_),
    .B(_175_),
    .C1(_028_),
    .C2(in5[1]),
    .ZN(_176_)
  );
  OAI21_X1 _406_ (
    .A(_069_),
    .B1(_025_),
    .B2(in4[1]),
    .ZN(_177_)
  );
  AOI21_X1 _407_ (
    .A(_071_),
    .B1(_068_),
    .B2(in3[1]),
    .ZN(_178_)
  );
  OAI21_X1 _408_ (
    .A(_178_),
    .B1(_177_),
    .B2(_176_),
    .ZN(_179_)
  );
  AOI21_X1 _409_ (
    .A(_075_),
    .B1(_071_),
    .B2(_003_),
    .ZN(_180_)
  );
  AOI221_X1 _410_ (
    .A(_019_),
    .B1(_179_),
    .B2(_180_),
    .C1(_075_),
    .C2(in1[1]),
    .ZN(_181_)
  );
  AOI21_X1 _411_ (
    .A(_181_),
    .B1(_019_),
    .B2(_001_),
    .ZN(out[1])
  );
  NOR2_X1 _412_ (
    .A1(in0[0]),
    .A2(_020_),
    .ZN(_182_)
  );
  NAND2_X1 _413_ (
    .A1(in4[0]),
    .A2(_024_),
    .ZN(_183_)
  );
  AND2_X1 _414_ (
    .A1(in14[0]),
    .A2(_046_),
    .ZN(_184_)
  );
  AOI211_X1 _415_ (
    .A(_044_),
    .B(_184_),
    .C1(_047_),
    .C2(in15[0]),
    .ZN(_185_)
  );
  OAI21_X1 _416_ (
    .A(_043_),
    .B1(_045_),
    .B2(in13[0]),
    .ZN(_186_)
  );
  NAND2_X1 _417_ (
    .A1(in12[0]),
    .A2(_042_),
    .ZN(_187_)
  );
  OAI211_X1 _418_ (
    .A(_039_),
    .B(_187_),
    .C1(_186_),
    .C2(_185_),
    .ZN(_188_)
  );
  AOI21_X1 _419_ (
    .A(_035_),
    .B1(_038_),
    .B2(_010_),
    .ZN(_189_)
  );
  AOI221_X1 _420_ (
    .A(_031_),
    .B1(_188_),
    .B2(_189_),
    .C1(_035_),
    .C2(in10[0]),
    .ZN(_190_)
  );
  NOR2_X1 _421_ (
    .A1(in9[0]),
    .A2(_032_),
    .ZN(_191_)
  );
  OAI21_X1 _422_ (
    .A(_056_),
    .B1(_190_),
    .B2(_191_),
    .ZN(_192_)
  );
  OAI211_X1 _423_ (
    .A(_059_),
    .B(_192_),
    .C1(in8[0]),
    .C2(_056_),
    .ZN(_193_)
  );
  NAND2_X1 _424_ (
    .A1(in7[0]),
    .A2(_058_),
    .ZN(_194_)
  );
  AOI21_X1 _425_ (
    .A(_062_),
    .B1(_193_),
    .B2(_194_),
    .ZN(_195_)
  );
  AOI21_X1 _426_ (
    .A(_028_),
    .B1(_062_),
    .B2(in6[0]),
    .ZN(_196_)
  );
  INV_X1 _427_ (
    .A(_196_),
    .ZN(_197_)
  );
  OAI221_X1 _428_ (
    .A(_025_),
    .B1(_195_),
    .B2(_197_),
    .C1(_029_),
    .C2(in5[0]),
    .ZN(_198_)
  );
  AOI21_X1 _429_ (
    .A(_068_),
    .B1(_183_),
    .B2(_198_),
    .ZN(_199_)
  );
  OAI21_X1 _430_ (
    .A(_072_),
    .B1(_069_),
    .B2(_004_),
    .ZN(_200_)
  );
  OAI221_X1 _431_ (
    .A(_076_),
    .B1(_199_),
    .B2(_200_),
    .C1(_072_),
    .C2(in2[0]),
    .ZN(_201_)
  );
  AOI21_X1 _432_ (
    .A(_019_),
    .B1(_075_),
    .B2(in1[0]),
    .ZN(_202_)
  );
  AOI21_X1 _433_ (
    .A(_182_),
    .B1(_201_),
    .B2(_202_),
    .ZN(out[0])
  );
  NAND2_X1 _434_ (
    .A1(in0[7]),
    .A2(_019_),
    .ZN(_203_)
  );
  NOR2_X1 _435_ (
    .A1(in15[7]),
    .A2(_046_),
    .ZN(_204_)
  );
  NAND2_X1 _436_ (
    .A1(in13[7]),
    .A2(_044_),
    .ZN(_205_)
  );
  OAI21_X1 _437_ (
    .A(_045_),
    .B1(_047_),
    .B2(in14[7]),
    .ZN(_206_)
  );
  OAI211_X1 _438_ (
    .A(_043_),
    .B(_205_),
    .C1(_206_),
    .C2(_204_),
    .ZN(_207_)
  );
  AOI21_X1 _439_ (
    .A(_038_),
    .B1(_042_),
    .B2(_016_),
    .ZN(_208_)
  );
  AOI221_X1 _440_ (
    .A(_035_),
    .B1(_207_),
    .B2(_208_),
    .C1(_038_),
    .C2(in11[7]),
    .ZN(_209_)
  );
  OAI21_X1 _441_ (
    .A(_032_),
    .B1(_036_),
    .B2(in10[7]),
    .ZN(_210_)
  );
  AOI21_X1 _442_ (
    .A(_055_),
    .B1(_031_),
    .B2(in9[7]),
    .ZN(_211_)
  );
  OAI21_X1 _443_ (
    .A(_211_),
    .B1(_210_),
    .B2(_209_),
    .ZN(_212_)
  );
  OR2_X1 _444_ (
    .A1(in8[7]),
    .A2(_056_),
    .ZN(_213_)
  );
  AOI21_X1 _445_ (
    .A(_058_),
    .B1(_212_),
    .B2(_213_),
    .ZN(_214_)
  );
  OAI21_X1 _446_ (
    .A(_063_),
    .B1(_059_),
    .B2(in7[7]),
    .ZN(_215_)
  );
  NAND2_X1 _447_ (
    .A1(in6[7]),
    .A2(_062_),
    .ZN(_216_)
  );
  OAI211_X1 _448_ (
    .A(_029_),
    .B(_216_),
    .C1(_215_),
    .C2(_214_),
    .ZN(_217_)
  );
  OAI211_X1 _449_ (
    .A(_025_),
    .B(_217_),
    .C1(_029_),
    .C2(in5[7]),
    .ZN(_218_)
  );
  AOI21_X1 _450_ (
    .A(_068_),
    .B1(_024_),
    .B2(in4[7]),
    .ZN(_219_)
  );
  OAI21_X1 _451_ (
    .A(_072_),
    .B1(_069_),
    .B2(in3[7]),
    .ZN(_220_)
  );
  AOI21_X1 _452_ (
    .A(_220_),
    .B1(_219_),
    .B2(_218_),
    .ZN(_221_)
  );
  AOI211_X1 _453_ (
    .A(_075_),
    .B(_221_),
    .C1(in2[7]),
    .C2(_071_),
    .ZN(_222_)
  );
  OAI21_X1 _454_ (
    .A(_020_),
    .B1(_076_),
    .B2(in1[7]),
    .ZN(_223_)
  );
  OAI21_X1 _455_ (
    .A(_203_),
    .B1(_222_),
    .B2(_223_),
    .ZN(out[7])
  );
endmodule

module register_bank(data_in, raddr, waddr, wen, clk, data_out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  input clk;
  wire clk;
  input [7:0] data_in;
  wire [7:0] data_in;
  output [7:0] data_out;
  wire [7:0] data_out;
  input [3:0] raddr;
  wire [3:0] raddr;
  wire \reg_block[0].bit_block[0].write_enable ;
  wire \reg_block[0].bit_block[1].write_enable ;
  wire \reg_block[0].bit_block[2].write_enable ;
  wire \reg_block[0].bit_block[3].write_enable ;
  wire \reg_block[0].bit_block[4].write_enable ;
  wire \reg_block[0].bit_block[5].write_enable ;
  wire \reg_block[0].bit_block[6].write_enable ;
  wire \reg_block[0].bit_block[7].write_enable ;
  wire \reg_block[10].bit_block[0].write_enable ;
  wire \reg_block[10].bit_block[1].write_enable ;
  wire \reg_block[10].bit_block[2].write_enable ;
  wire \reg_block[10].bit_block[3].write_enable ;
  wire \reg_block[10].bit_block[4].write_enable ;
  wire \reg_block[10].bit_block[5].write_enable ;
  wire \reg_block[10].bit_block[6].write_enable ;
  wire \reg_block[10].bit_block[7].write_enable ;
  wire \reg_block[11].bit_block[0].write_enable ;
  wire \reg_block[11].bit_block[1].write_enable ;
  wire \reg_block[11].bit_block[2].write_enable ;
  wire \reg_block[11].bit_block[3].write_enable ;
  wire \reg_block[11].bit_block[4].write_enable ;
  wire \reg_block[11].bit_block[5].write_enable ;
  wire \reg_block[11].bit_block[6].write_enable ;
  wire \reg_block[11].bit_block[7].write_enable ;
  wire \reg_block[12].bit_block[0].write_enable ;
  wire \reg_block[12].bit_block[1].write_enable ;
  wire \reg_block[12].bit_block[2].write_enable ;
  wire \reg_block[12].bit_block[3].write_enable ;
  wire \reg_block[12].bit_block[4].write_enable ;
  wire \reg_block[12].bit_block[5].write_enable ;
  wire \reg_block[12].bit_block[6].write_enable ;
  wire \reg_block[12].bit_block[7].write_enable ;
  wire \reg_block[13].bit_block[0].write_enable ;
  wire \reg_block[13].bit_block[1].write_enable ;
  wire \reg_block[13].bit_block[2].write_enable ;
  wire \reg_block[13].bit_block[3].write_enable ;
  wire \reg_block[13].bit_block[4].write_enable ;
  wire \reg_block[13].bit_block[5].write_enable ;
  wire \reg_block[13].bit_block[6].write_enable ;
  wire \reg_block[13].bit_block[7].write_enable ;
  wire \reg_block[14].bit_block[0].write_enable ;
  wire \reg_block[14].bit_block[1].write_enable ;
  wire \reg_block[14].bit_block[2].write_enable ;
  wire \reg_block[14].bit_block[3].write_enable ;
  wire \reg_block[14].bit_block[4].write_enable ;
  wire \reg_block[14].bit_block[5].write_enable ;
  wire \reg_block[14].bit_block[6].write_enable ;
  wire \reg_block[14].bit_block[7].write_enable ;
  wire \reg_block[15].bit_block[0].write_enable ;
  wire \reg_block[15].bit_block[1].write_enable ;
  wire \reg_block[15].bit_block[2].write_enable ;
  wire \reg_block[15].bit_block[3].write_enable ;
  wire \reg_block[15].bit_block[4].write_enable ;
  wire \reg_block[15].bit_block[5].write_enable ;
  wire \reg_block[15].bit_block[6].write_enable ;
  wire \reg_block[15].bit_block[7].write_enable ;
  wire \reg_block[1].bit_block[0].write_enable ;
  wire \reg_block[1].bit_block[1].write_enable ;
  wire \reg_block[1].bit_block[2].write_enable ;
  wire \reg_block[1].bit_block[3].write_enable ;
  wire \reg_block[1].bit_block[4].write_enable ;
  wire \reg_block[1].bit_block[5].write_enable ;
  wire \reg_block[1].bit_block[6].write_enable ;
  wire \reg_block[1].bit_block[7].write_enable ;
  wire \reg_block[2].bit_block[0].write_enable ;
  wire \reg_block[2].bit_block[1].write_enable ;
  wire \reg_block[2].bit_block[2].write_enable ;
  wire \reg_block[2].bit_block[3].write_enable ;
  wire \reg_block[2].bit_block[4].write_enable ;
  wire \reg_block[2].bit_block[5].write_enable ;
  wire \reg_block[2].bit_block[6].write_enable ;
  wire \reg_block[2].bit_block[7].write_enable ;
  wire \reg_block[3].bit_block[0].write_enable ;
  wire \reg_block[3].bit_block[1].write_enable ;
  wire \reg_block[3].bit_block[2].write_enable ;
  wire \reg_block[3].bit_block[3].write_enable ;
  wire \reg_block[3].bit_block[4].write_enable ;
  wire \reg_block[3].bit_block[5].write_enable ;
  wire \reg_block[3].bit_block[6].write_enable ;
  wire \reg_block[3].bit_block[7].write_enable ;
  wire \reg_block[4].bit_block[0].write_enable ;
  wire \reg_block[4].bit_block[1].write_enable ;
  wire \reg_block[4].bit_block[2].write_enable ;
  wire \reg_block[4].bit_block[3].write_enable ;
  wire \reg_block[4].bit_block[4].write_enable ;
  wire \reg_block[4].bit_block[5].write_enable ;
  wire \reg_block[4].bit_block[6].write_enable ;
  wire \reg_block[4].bit_block[7].write_enable ;
  wire \reg_block[5].bit_block[0].write_enable ;
  wire \reg_block[5].bit_block[1].write_enable ;
  wire \reg_block[5].bit_block[2].write_enable ;
  wire \reg_block[5].bit_block[3].write_enable ;
  wire \reg_block[5].bit_block[4].write_enable ;
  wire \reg_block[5].bit_block[5].write_enable ;
  wire \reg_block[5].bit_block[6].write_enable ;
  wire \reg_block[5].bit_block[7].write_enable ;
  wire \reg_block[6].bit_block[0].write_enable ;
  wire \reg_block[6].bit_block[1].write_enable ;
  wire \reg_block[6].bit_block[2].write_enable ;
  wire \reg_block[6].bit_block[3].write_enable ;
  wire \reg_block[6].bit_block[4].write_enable ;
  wire \reg_block[6].bit_block[5].write_enable ;
  wire \reg_block[6].bit_block[6].write_enable ;
  wire \reg_block[6].bit_block[7].write_enable ;
  wire \reg_block[7].bit_block[0].write_enable ;
  wire \reg_block[7].bit_block[1].write_enable ;
  wire \reg_block[7].bit_block[2].write_enable ;
  wire \reg_block[7].bit_block[3].write_enable ;
  wire \reg_block[7].bit_block[4].write_enable ;
  wire \reg_block[7].bit_block[5].write_enable ;
  wire \reg_block[7].bit_block[6].write_enable ;
  wire \reg_block[7].bit_block[7].write_enable ;
  wire \reg_block[8].bit_block[0].write_enable ;
  wire \reg_block[8].bit_block[1].write_enable ;
  wire \reg_block[8].bit_block[2].write_enable ;
  wire \reg_block[8].bit_block[3].write_enable ;
  wire \reg_block[8].bit_block[4].write_enable ;
  wire \reg_block[8].bit_block[5].write_enable ;
  wire \reg_block[8].bit_block[6].write_enable ;
  wire \reg_block[8].bit_block[7].write_enable ;
  wire \reg_block[9].bit_block[0].write_enable ;
  wire \reg_block[9].bit_block[1].write_enable ;
  wire \reg_block[9].bit_block[2].write_enable ;
  wire \reg_block[9].bit_block[3].write_enable ;
  wire \reg_block[9].bit_block[4].write_enable ;
  wire \reg_block[9].bit_block[5].write_enable ;
  wire \reg_block[9].bit_block[6].write_enable ;
  wire \reg_block[9].bit_block[7].write_enable ;
  wire [7:0] \registers[0] ;
  wire [7:0] \registers[10] ;
  wire [7:0] \registers[11] ;
  wire [7:0] \registers[12] ;
  wire [7:0] \registers[13] ;
  wire [7:0] \registers[14] ;
  wire [7:0] \registers[15] ;
  wire [7:0] \registers[1] ;
  wire [7:0] \registers[2] ;
  wire [7:0] \registers[3] ;
  wire [7:0] \registers[4] ;
  wire [7:0] \registers[5] ;
  wire [7:0] \registers[6] ;
  wire [7:0] \registers[7] ;
  wire [7:0] \registers[8] ;
  wire [7:0] \registers[9] ;
  input [3:0] waddr;
  wire [3:0] waddr;
  input wen;
  wire wen;
  INV_X1 _10_ (
    .A(waddr[1]),
    .ZN(_00_)
  );
  INV_X1 _11_ (
    .A(waddr[3]),
    .ZN(_01_)
  );
  INV_X1 _12_ (
    .A(wen),
    .ZN(_02_)
  );
  OR3_X1 _13_ (
    .A1(waddr[1]),
    .A2(waddr[0]),
    .A3(_02_),
    .ZN(_03_)
  );
  NOR3_X1 _14_ (
    .A1(waddr[2]),
    .A2(waddr[3]),
    .A3(_03_),
    .ZN(\reg_block[0].bit_block[0].write_enable )
  );
  NAND3_X1 _15_ (
    .A1(_00_),
    .A2(waddr[0]),
    .A3(wen),
    .ZN(_04_)
  );
  NOR3_X1 _16_ (
    .A1(waddr[2]),
    .A2(waddr[3]),
    .A3(_04_),
    .ZN(\reg_block[1].bit_block[0].write_enable )
  );
  OR3_X1 _17_ (
    .A1(_00_),
    .A2(waddr[0]),
    .A3(_02_),
    .ZN(_05_)
  );
  NOR3_X1 _18_ (
    .A1(waddr[2]),
    .A2(waddr[3]),
    .A3(_05_),
    .ZN(\reg_block[2].bit_block[0].write_enable )
  );
  NAND3_X1 _19_ (
    .A1(waddr[1]),
    .A2(waddr[0]),
    .A3(wen),
    .ZN(_06_)
  );
  NOR3_X1 _20_ (
    .A1(waddr[2]),
    .A2(waddr[3]),
    .A3(_06_),
    .ZN(\reg_block[3].bit_block[0].write_enable )
  );
  NAND2_X1 _21_ (
    .A1(waddr[2]),
    .A2(_01_),
    .ZN(_07_)
  );
  NOR2_X1 _22_ (
    .A1(_03_),
    .A2(_07_),
    .ZN(\reg_block[4].bit_block[0].write_enable )
  );
  NOR2_X1 _23_ (
    .A1(_04_),
    .A2(_07_),
    .ZN(\reg_block[5].bit_block[0].write_enable )
  );
  NOR2_X1 _24_ (
    .A1(_05_),
    .A2(_07_),
    .ZN(\reg_block[6].bit_block[0].write_enable )
  );
  NOR2_X1 _25_ (
    .A1(_06_),
    .A2(_07_),
    .ZN(\reg_block[7].bit_block[0].write_enable )
  );
  OR2_X1 _26_ (
    .A1(waddr[2]),
    .A2(_01_),
    .ZN(_08_)
  );
  NOR2_X1 _27_ (
    .A1(_03_),
    .A2(_08_),
    .ZN(\reg_block[8].bit_block[0].write_enable )
  );
  NOR2_X1 _28_ (
    .A1(_04_),
    .A2(_08_),
    .ZN(\reg_block[9].bit_block[0].write_enable )
  );
  NOR2_X1 _29_ (
    .A1(_05_),
    .A2(_08_),
    .ZN(\reg_block[10].bit_block[0].write_enable )
  );
  NOR2_X1 _30_ (
    .A1(_06_),
    .A2(_08_),
    .ZN(\reg_block[11].bit_block[0].write_enable )
  );
  NAND2_X1 _31_ (
    .A1(waddr[2]),
    .A2(waddr[3]),
    .ZN(_09_)
  );
  NOR2_X1 _32_ (
    .A1(_03_),
    .A2(_09_),
    .ZN(\reg_block[12].bit_block[0].write_enable )
  );
  NOR2_X1 _33_ (
    .A1(_04_),
    .A2(_09_),
    .ZN(\reg_block[13].bit_block[0].write_enable )
  );
  NOR2_X1 _34_ (
    .A1(_05_),
    .A2(_09_),
    .ZN(\reg_block[14].bit_block[0].write_enable )
  );
  NOR2_X1 _35_ (
    .A1(_06_),
    .A2(_09_),
    .ZN(\reg_block[15].bit_block[0].write_enable )
  );
  mux16to1_8bit read_mux (
    .in0(\registers[0] ),
    .in1(\registers[1] ),
    .in10(\registers[10] ),
    .in11(\registers[11] ),
    .in12(\registers[12] ),
    .in13(\registers[13] ),
    .in14(\registers[14] ),
    .in15(\registers[15] ),
    .in2(\registers[2] ),
    .in3(\registers[3] ),
    .in4(\registers[4] ),
    .in5(\registers[5] ),
    .in6(\registers[6] ),
    .in7(\registers[7] ),
    .in8(\registers[8] ),
    .in9(\registers[9] ),
    .out(data_out),
    .sel(raddr)
  );
  DFF \reg_block[0].bit_block[0].dff_inst  (
    .clk(clk),
    .d(data_in[0]),
    .q(\registers[0] [0]),
    .wen(\reg_block[0].bit_block[0].write_enable )
  );
  DFF \reg_block[0].bit_block[1].dff_inst  (
    .clk(clk),
    .d(data_in[1]),
    .q(\registers[0] [1]),
    .wen(\reg_block[0].bit_block[0].write_enable )
  );
  DFF \reg_block[0].bit_block[2].dff_inst  (
    .clk(clk),
    .d(data_in[2]),
    .q(\registers[0] [2]),
    .wen(\reg_block[0].bit_block[0].write_enable )
  );
  DFF \reg_block[0].bit_block[3].dff_inst  (
    .clk(clk),
    .d(data_in[3]),
    .q(\registers[0] [3]),
    .wen(\reg_block[0].bit_block[0].write_enable )
  );
  DFF \reg_block[0].bit_block[4].dff_inst  (
    .clk(clk),
    .d(data_in[4]),
    .q(\registers[0] [4]),
    .wen(\reg_block[0].bit_block[0].write_enable )
  );
  DFF \reg_block[0].bit_block[5].dff_inst  (
    .clk(clk),
    .d(data_in[5]),
    .q(\registers[0] [5]),
    .wen(\reg_block[0].bit_block[0].write_enable )
  );
  DFF \reg_block[0].bit_block[6].dff_inst  (
    .clk(clk),
    .d(data_in[6]),
    .q(\registers[0] [6]),
    .wen(\reg_block[0].bit_block[0].write_enable )
  );
  DFF \reg_block[0].bit_block[7].dff_inst  (
    .clk(clk),
    .d(data_in[7]),
    .q(\registers[0] [7]),
    .wen(\reg_block[0].bit_block[0].write_enable )
  );
  DFF \reg_block[10].bit_block[0].dff_inst  (
    .clk(clk),
    .d(data_in[0]),
    .q(\registers[10] [0]),
    .wen(\reg_block[10].bit_block[0].write_enable )
  );
  DFF \reg_block[10].bit_block[1].dff_inst  (
    .clk(clk),
    .d(data_in[1]),
    .q(\registers[10] [1]),
    .wen(\reg_block[10].bit_block[0].write_enable )
  );
  DFF \reg_block[10].bit_block[2].dff_inst  (
    .clk(clk),
    .d(data_in[2]),
    .q(\registers[10] [2]),
    .wen(\reg_block[10].bit_block[0].write_enable )
  );
  DFF \reg_block[10].bit_block[3].dff_inst  (
    .clk(clk),
    .d(data_in[3]),
    .q(\registers[10] [3]),
    .wen(\reg_block[10].bit_block[0].write_enable )
  );
  DFF \reg_block[10].bit_block[4].dff_inst  (
    .clk(clk),
    .d(data_in[4]),
    .q(\registers[10] [4]),
    .wen(\reg_block[10].bit_block[0].write_enable )
  );
  DFF \reg_block[10].bit_block[5].dff_inst  (
    .clk(clk),
    .d(data_in[5]),
    .q(\registers[10] [5]),
    .wen(\reg_block[10].bit_block[0].write_enable )
  );
  DFF \reg_block[10].bit_block[6].dff_inst  (
    .clk(clk),
    .d(data_in[6]),
    .q(\registers[10] [6]),
    .wen(\reg_block[10].bit_block[0].write_enable )
  );
  DFF \reg_block[10].bit_block[7].dff_inst  (
    .clk(clk),
    .d(data_in[7]),
    .q(\registers[10] [7]),
    .wen(\reg_block[10].bit_block[0].write_enable )
  );
  DFF \reg_block[11].bit_block[0].dff_inst  (
    .clk(clk),
    .d(data_in[0]),
    .q(\registers[11] [0]),
    .wen(\reg_block[11].bit_block[0].write_enable )
  );
  DFF \reg_block[11].bit_block[1].dff_inst  (
    .clk(clk),
    .d(data_in[1]),
    .q(\registers[11] [1]),
    .wen(\reg_block[11].bit_block[0].write_enable )
  );
  DFF \reg_block[11].bit_block[2].dff_inst  (
    .clk(clk),
    .d(data_in[2]),
    .q(\registers[11] [2]),
    .wen(\reg_block[11].bit_block[0].write_enable )
  );
  DFF \reg_block[11].bit_block[3].dff_inst  (
    .clk(clk),
    .d(data_in[3]),
    .q(\registers[11] [3]),
    .wen(\reg_block[11].bit_block[0].write_enable )
  );
  DFF \reg_block[11].bit_block[4].dff_inst  (
    .clk(clk),
    .d(data_in[4]),
    .q(\registers[11] [4]),
    .wen(\reg_block[11].bit_block[0].write_enable )
  );
  DFF \reg_block[11].bit_block[5].dff_inst  (
    .clk(clk),
    .d(data_in[5]),
    .q(\registers[11] [5]),
    .wen(\reg_block[11].bit_block[0].write_enable )
  );
  DFF \reg_block[11].bit_block[6].dff_inst  (
    .clk(clk),
    .d(data_in[6]),
    .q(\registers[11] [6]),
    .wen(\reg_block[11].bit_block[0].write_enable )
  );
  DFF \reg_block[11].bit_block[7].dff_inst  (
    .clk(clk),
    .d(data_in[7]),
    .q(\registers[11] [7]),
    .wen(\reg_block[11].bit_block[0].write_enable )
  );
  DFF \reg_block[12].bit_block[0].dff_inst  (
    .clk(clk),
    .d(data_in[0]),
    .q(\registers[12] [0]),
    .wen(\reg_block[12].bit_block[0].write_enable )
  );
  DFF \reg_block[12].bit_block[1].dff_inst  (
    .clk(clk),
    .d(data_in[1]),
    .q(\registers[12] [1]),
    .wen(\reg_block[12].bit_block[0].write_enable )
  );
  DFF \reg_block[12].bit_block[2].dff_inst  (
    .clk(clk),
    .d(data_in[2]),
    .q(\registers[12] [2]),
    .wen(\reg_block[12].bit_block[0].write_enable )
  );
  DFF \reg_block[12].bit_block[3].dff_inst  (
    .clk(clk),
    .d(data_in[3]),
    .q(\registers[12] [3]),
    .wen(\reg_block[12].bit_block[0].write_enable )
  );
  DFF \reg_block[12].bit_block[4].dff_inst  (
    .clk(clk),
    .d(data_in[4]),
    .q(\registers[12] [4]),
    .wen(\reg_block[12].bit_block[0].write_enable )
  );
  DFF \reg_block[12].bit_block[5].dff_inst  (
    .clk(clk),
    .d(data_in[5]),
    .q(\registers[12] [5]),
    .wen(\reg_block[12].bit_block[0].write_enable )
  );
  DFF \reg_block[12].bit_block[6].dff_inst  (
    .clk(clk),
    .d(data_in[6]),
    .q(\registers[12] [6]),
    .wen(\reg_block[12].bit_block[0].write_enable )
  );
  DFF \reg_block[12].bit_block[7].dff_inst  (
    .clk(clk),
    .d(data_in[7]),
    .q(\registers[12] [7]),
    .wen(\reg_block[12].bit_block[0].write_enable )
  );
  DFF \reg_block[13].bit_block[0].dff_inst  (
    .clk(clk),
    .d(data_in[0]),
    .q(\registers[13] [0]),
    .wen(\reg_block[13].bit_block[0].write_enable )
  );
  DFF \reg_block[13].bit_block[1].dff_inst  (
    .clk(clk),
    .d(data_in[1]),
    .q(\registers[13] [1]),
    .wen(\reg_block[13].bit_block[0].write_enable )
  );
  DFF \reg_block[13].bit_block[2].dff_inst  (
    .clk(clk),
    .d(data_in[2]),
    .q(\registers[13] [2]),
    .wen(\reg_block[13].bit_block[0].write_enable )
  );
  DFF \reg_block[13].bit_block[3].dff_inst  (
    .clk(clk),
    .d(data_in[3]),
    .q(\registers[13] [3]),
    .wen(\reg_block[13].bit_block[0].write_enable )
  );
  DFF \reg_block[13].bit_block[4].dff_inst  (
    .clk(clk),
    .d(data_in[4]),
    .q(\registers[13] [4]),
    .wen(\reg_block[13].bit_block[0].write_enable )
  );
  DFF \reg_block[13].bit_block[5].dff_inst  (
    .clk(clk),
    .d(data_in[5]),
    .q(\registers[13] [5]),
    .wen(\reg_block[13].bit_block[0].write_enable )
  );
  DFF \reg_block[13].bit_block[6].dff_inst  (
    .clk(clk),
    .d(data_in[6]),
    .q(\registers[13] [6]),
    .wen(\reg_block[13].bit_block[0].write_enable )
  );
  DFF \reg_block[13].bit_block[7].dff_inst  (
    .clk(clk),
    .d(data_in[7]),
    .q(\registers[13] [7]),
    .wen(\reg_block[13].bit_block[0].write_enable )
  );
  DFF \reg_block[14].bit_block[0].dff_inst  (
    .clk(clk),
    .d(data_in[0]),
    .q(\registers[14] [0]),
    .wen(\reg_block[14].bit_block[0].write_enable )
  );
  DFF \reg_block[14].bit_block[1].dff_inst  (
    .clk(clk),
    .d(data_in[1]),
    .q(\registers[14] [1]),
    .wen(\reg_block[14].bit_block[0].write_enable )
  );
  DFF \reg_block[14].bit_block[2].dff_inst  (
    .clk(clk),
    .d(data_in[2]),
    .q(\registers[14] [2]),
    .wen(\reg_block[14].bit_block[0].write_enable )
  );
  DFF \reg_block[14].bit_block[3].dff_inst  (
    .clk(clk),
    .d(data_in[3]),
    .q(\registers[14] [3]),
    .wen(\reg_block[14].bit_block[0].write_enable )
  );
  DFF \reg_block[14].bit_block[4].dff_inst  (
    .clk(clk),
    .d(data_in[4]),
    .q(\registers[14] [4]),
    .wen(\reg_block[14].bit_block[0].write_enable )
  );
  DFF \reg_block[14].bit_block[5].dff_inst  (
    .clk(clk),
    .d(data_in[5]),
    .q(\registers[14] [5]),
    .wen(\reg_block[14].bit_block[0].write_enable )
  );
  DFF \reg_block[14].bit_block[6].dff_inst  (
    .clk(clk),
    .d(data_in[6]),
    .q(\registers[14] [6]),
    .wen(\reg_block[14].bit_block[0].write_enable )
  );
  DFF \reg_block[14].bit_block[7].dff_inst  (
    .clk(clk),
    .d(data_in[7]),
    .q(\registers[14] [7]),
    .wen(\reg_block[14].bit_block[0].write_enable )
  );
  DFF \reg_block[15].bit_block[0].dff_inst  (
    .clk(clk),
    .d(data_in[0]),
    .q(\registers[15] [0]),
    .wen(\reg_block[15].bit_block[0].write_enable )
  );
  DFF \reg_block[15].bit_block[1].dff_inst  (
    .clk(clk),
    .d(data_in[1]),
    .q(\registers[15] [1]),
    .wen(\reg_block[15].bit_block[0].write_enable )
  );
  DFF \reg_block[15].bit_block[2].dff_inst  (
    .clk(clk),
    .d(data_in[2]),
    .q(\registers[15] [2]),
    .wen(\reg_block[15].bit_block[0].write_enable )
  );
  DFF \reg_block[15].bit_block[3].dff_inst  (
    .clk(clk),
    .d(data_in[3]),
    .q(\registers[15] [3]),
    .wen(\reg_block[15].bit_block[0].write_enable )
  );
  DFF \reg_block[15].bit_block[4].dff_inst  (
    .clk(clk),
    .d(data_in[4]),
    .q(\registers[15] [4]),
    .wen(\reg_block[15].bit_block[0].write_enable )
  );
  DFF \reg_block[15].bit_block[5].dff_inst  (
    .clk(clk),
    .d(data_in[5]),
    .q(\registers[15] [5]),
    .wen(\reg_block[15].bit_block[0].write_enable )
  );
  DFF \reg_block[15].bit_block[6].dff_inst  (
    .clk(clk),
    .d(data_in[6]),
    .q(\registers[15] [6]),
    .wen(\reg_block[15].bit_block[0].write_enable )
  );
  DFF \reg_block[15].bit_block[7].dff_inst  (
    .clk(clk),
    .d(data_in[7]),
    .q(\registers[15] [7]),
    .wen(\reg_block[15].bit_block[0].write_enable )
  );
  DFF \reg_block[1].bit_block[0].dff_inst  (
    .clk(clk),
    .d(data_in[0]),
    .q(\registers[1] [0]),
    .wen(\reg_block[1].bit_block[0].write_enable )
  );
  DFF \reg_block[1].bit_block[1].dff_inst  (
    .clk(clk),
    .d(data_in[1]),
    .q(\registers[1] [1]),
    .wen(\reg_block[1].bit_block[0].write_enable )
  );
  DFF \reg_block[1].bit_block[2].dff_inst  (
    .clk(clk),
    .d(data_in[2]),
    .q(\registers[1] [2]),
    .wen(\reg_block[1].bit_block[0].write_enable )
  );
  DFF \reg_block[1].bit_block[3].dff_inst  (
    .clk(clk),
    .d(data_in[3]),
    .q(\registers[1] [3]),
    .wen(\reg_block[1].bit_block[0].write_enable )
  );
  DFF \reg_block[1].bit_block[4].dff_inst  (
    .clk(clk),
    .d(data_in[4]),
    .q(\registers[1] [4]),
    .wen(\reg_block[1].bit_block[0].write_enable )
  );
  DFF \reg_block[1].bit_block[5].dff_inst  (
    .clk(clk),
    .d(data_in[5]),
    .q(\registers[1] [5]),
    .wen(\reg_block[1].bit_block[0].write_enable )
  );
  DFF \reg_block[1].bit_block[6].dff_inst  (
    .clk(clk),
    .d(data_in[6]),
    .q(\registers[1] [6]),
    .wen(\reg_block[1].bit_block[0].write_enable )
  );
  DFF \reg_block[1].bit_block[7].dff_inst  (
    .clk(clk),
    .d(data_in[7]),
    .q(\registers[1] [7]),
    .wen(\reg_block[1].bit_block[0].write_enable )
  );
  DFF \reg_block[2].bit_block[0].dff_inst  (
    .clk(clk),
    .d(data_in[0]),
    .q(\registers[2] [0]),
    .wen(\reg_block[2].bit_block[0].write_enable )
  );
  DFF \reg_block[2].bit_block[1].dff_inst  (
    .clk(clk),
    .d(data_in[1]),
    .q(\registers[2] [1]),
    .wen(\reg_block[2].bit_block[0].write_enable )
  );
  DFF \reg_block[2].bit_block[2].dff_inst  (
    .clk(clk),
    .d(data_in[2]),
    .q(\registers[2] [2]),
    .wen(\reg_block[2].bit_block[0].write_enable )
  );
  DFF \reg_block[2].bit_block[3].dff_inst  (
    .clk(clk),
    .d(data_in[3]),
    .q(\registers[2] [3]),
    .wen(\reg_block[2].bit_block[0].write_enable )
  );
  DFF \reg_block[2].bit_block[4].dff_inst  (
    .clk(clk),
    .d(data_in[4]),
    .q(\registers[2] [4]),
    .wen(\reg_block[2].bit_block[0].write_enable )
  );
  DFF \reg_block[2].bit_block[5].dff_inst  (
    .clk(clk),
    .d(data_in[5]),
    .q(\registers[2] [5]),
    .wen(\reg_block[2].bit_block[0].write_enable )
  );
  DFF \reg_block[2].bit_block[6].dff_inst  (
    .clk(clk),
    .d(data_in[6]),
    .q(\registers[2] [6]),
    .wen(\reg_block[2].bit_block[0].write_enable )
  );
  DFF \reg_block[2].bit_block[7].dff_inst  (
    .clk(clk),
    .d(data_in[7]),
    .q(\registers[2] [7]),
    .wen(\reg_block[2].bit_block[0].write_enable )
  );
  DFF \reg_block[3].bit_block[0].dff_inst  (
    .clk(clk),
    .d(data_in[0]),
    .q(\registers[3] [0]),
    .wen(\reg_block[3].bit_block[0].write_enable )
  );
  DFF \reg_block[3].bit_block[1].dff_inst  (
    .clk(clk),
    .d(data_in[1]),
    .q(\registers[3] [1]),
    .wen(\reg_block[3].bit_block[0].write_enable )
  );
  DFF \reg_block[3].bit_block[2].dff_inst  (
    .clk(clk),
    .d(data_in[2]),
    .q(\registers[3] [2]),
    .wen(\reg_block[3].bit_block[0].write_enable )
  );
  DFF \reg_block[3].bit_block[3].dff_inst  (
    .clk(clk),
    .d(data_in[3]),
    .q(\registers[3] [3]),
    .wen(\reg_block[3].bit_block[0].write_enable )
  );
  DFF \reg_block[3].bit_block[4].dff_inst  (
    .clk(clk),
    .d(data_in[4]),
    .q(\registers[3] [4]),
    .wen(\reg_block[3].bit_block[0].write_enable )
  );
  DFF \reg_block[3].bit_block[5].dff_inst  (
    .clk(clk),
    .d(data_in[5]),
    .q(\registers[3] [5]),
    .wen(\reg_block[3].bit_block[0].write_enable )
  );
  DFF \reg_block[3].bit_block[6].dff_inst  (
    .clk(clk),
    .d(data_in[6]),
    .q(\registers[3] [6]),
    .wen(\reg_block[3].bit_block[0].write_enable )
  );
  DFF \reg_block[3].bit_block[7].dff_inst  (
    .clk(clk),
    .d(data_in[7]),
    .q(\registers[3] [7]),
    .wen(\reg_block[3].bit_block[0].write_enable )
  );
  DFF \reg_block[4].bit_block[0].dff_inst  (
    .clk(clk),
    .d(data_in[0]),
    .q(\registers[4] [0]),
    .wen(\reg_block[4].bit_block[0].write_enable )
  );
  DFF \reg_block[4].bit_block[1].dff_inst  (
    .clk(clk),
    .d(data_in[1]),
    .q(\registers[4] [1]),
    .wen(\reg_block[4].bit_block[0].write_enable )
  );
  DFF \reg_block[4].bit_block[2].dff_inst  (
    .clk(clk),
    .d(data_in[2]),
    .q(\registers[4] [2]),
    .wen(\reg_block[4].bit_block[0].write_enable )
  );
  DFF \reg_block[4].bit_block[3].dff_inst  (
    .clk(clk),
    .d(data_in[3]),
    .q(\registers[4] [3]),
    .wen(\reg_block[4].bit_block[0].write_enable )
  );
  DFF \reg_block[4].bit_block[4].dff_inst  (
    .clk(clk),
    .d(data_in[4]),
    .q(\registers[4] [4]),
    .wen(\reg_block[4].bit_block[0].write_enable )
  );
  DFF \reg_block[4].bit_block[5].dff_inst  (
    .clk(clk),
    .d(data_in[5]),
    .q(\registers[4] [5]),
    .wen(\reg_block[4].bit_block[0].write_enable )
  );
  DFF \reg_block[4].bit_block[6].dff_inst  (
    .clk(clk),
    .d(data_in[6]),
    .q(\registers[4] [6]),
    .wen(\reg_block[4].bit_block[0].write_enable )
  );
  DFF \reg_block[4].bit_block[7].dff_inst  (
    .clk(clk),
    .d(data_in[7]),
    .q(\registers[4] [7]),
    .wen(\reg_block[4].bit_block[0].write_enable )
  );
  DFF \reg_block[5].bit_block[0].dff_inst  (
    .clk(clk),
    .d(data_in[0]),
    .q(\registers[5] [0]),
    .wen(\reg_block[5].bit_block[0].write_enable )
  );
  DFF \reg_block[5].bit_block[1].dff_inst  (
    .clk(clk),
    .d(data_in[1]),
    .q(\registers[5] [1]),
    .wen(\reg_block[5].bit_block[0].write_enable )
  );
  DFF \reg_block[5].bit_block[2].dff_inst  (
    .clk(clk),
    .d(data_in[2]),
    .q(\registers[5] [2]),
    .wen(\reg_block[5].bit_block[0].write_enable )
  );
  DFF \reg_block[5].bit_block[3].dff_inst  (
    .clk(clk),
    .d(data_in[3]),
    .q(\registers[5] [3]),
    .wen(\reg_block[5].bit_block[0].write_enable )
  );
  DFF \reg_block[5].bit_block[4].dff_inst  (
    .clk(clk),
    .d(data_in[4]),
    .q(\registers[5] [4]),
    .wen(\reg_block[5].bit_block[0].write_enable )
  );
  DFF \reg_block[5].bit_block[5].dff_inst  (
    .clk(clk),
    .d(data_in[5]),
    .q(\registers[5] [5]),
    .wen(\reg_block[5].bit_block[0].write_enable )
  );
  DFF \reg_block[5].bit_block[6].dff_inst  (
    .clk(clk),
    .d(data_in[6]),
    .q(\registers[5] [6]),
    .wen(\reg_block[5].bit_block[0].write_enable )
  );
  DFF \reg_block[5].bit_block[7].dff_inst  (
    .clk(clk),
    .d(data_in[7]),
    .q(\registers[5] [7]),
    .wen(\reg_block[5].bit_block[0].write_enable )
  );
  DFF \reg_block[6].bit_block[0].dff_inst  (
    .clk(clk),
    .d(data_in[0]),
    .q(\registers[6] [0]),
    .wen(\reg_block[6].bit_block[0].write_enable )
  );
  DFF \reg_block[6].bit_block[1].dff_inst  (
    .clk(clk),
    .d(data_in[1]),
    .q(\registers[6] [1]),
    .wen(\reg_block[6].bit_block[0].write_enable )
  );
  DFF \reg_block[6].bit_block[2].dff_inst  (
    .clk(clk),
    .d(data_in[2]),
    .q(\registers[6] [2]),
    .wen(\reg_block[6].bit_block[0].write_enable )
  );
  DFF \reg_block[6].bit_block[3].dff_inst  (
    .clk(clk),
    .d(data_in[3]),
    .q(\registers[6] [3]),
    .wen(\reg_block[6].bit_block[0].write_enable )
  );
  DFF \reg_block[6].bit_block[4].dff_inst  (
    .clk(clk),
    .d(data_in[4]),
    .q(\registers[6] [4]),
    .wen(\reg_block[6].bit_block[0].write_enable )
  );
  DFF \reg_block[6].bit_block[5].dff_inst  (
    .clk(clk),
    .d(data_in[5]),
    .q(\registers[6] [5]),
    .wen(\reg_block[6].bit_block[0].write_enable )
  );
  DFF \reg_block[6].bit_block[6].dff_inst  (
    .clk(clk),
    .d(data_in[6]),
    .q(\registers[6] [6]),
    .wen(\reg_block[6].bit_block[0].write_enable )
  );
  DFF \reg_block[6].bit_block[7].dff_inst  (
    .clk(clk),
    .d(data_in[7]),
    .q(\registers[6] [7]),
    .wen(\reg_block[6].bit_block[0].write_enable )
  );
  DFF \reg_block[7].bit_block[0].dff_inst  (
    .clk(clk),
    .d(data_in[0]),
    .q(\registers[7] [0]),
    .wen(\reg_block[7].bit_block[0].write_enable )
  );
  DFF \reg_block[7].bit_block[1].dff_inst  (
    .clk(clk),
    .d(data_in[1]),
    .q(\registers[7] [1]),
    .wen(\reg_block[7].bit_block[0].write_enable )
  );
  DFF \reg_block[7].bit_block[2].dff_inst  (
    .clk(clk),
    .d(data_in[2]),
    .q(\registers[7] [2]),
    .wen(\reg_block[7].bit_block[0].write_enable )
  );
  DFF \reg_block[7].bit_block[3].dff_inst  (
    .clk(clk),
    .d(data_in[3]),
    .q(\registers[7] [3]),
    .wen(\reg_block[7].bit_block[0].write_enable )
  );
  DFF \reg_block[7].bit_block[4].dff_inst  (
    .clk(clk),
    .d(data_in[4]),
    .q(\registers[7] [4]),
    .wen(\reg_block[7].bit_block[0].write_enable )
  );
  DFF \reg_block[7].bit_block[5].dff_inst  (
    .clk(clk),
    .d(data_in[5]),
    .q(\registers[7] [5]),
    .wen(\reg_block[7].bit_block[0].write_enable )
  );
  DFF \reg_block[7].bit_block[6].dff_inst  (
    .clk(clk),
    .d(data_in[6]),
    .q(\registers[7] [6]),
    .wen(\reg_block[7].bit_block[0].write_enable )
  );
  DFF \reg_block[7].bit_block[7].dff_inst  (
    .clk(clk),
    .d(data_in[7]),
    .q(\registers[7] [7]),
    .wen(\reg_block[7].bit_block[0].write_enable )
  );
  DFF \reg_block[8].bit_block[0].dff_inst  (
    .clk(clk),
    .d(data_in[0]),
    .q(\registers[8] [0]),
    .wen(\reg_block[8].bit_block[0].write_enable )
  );
  DFF \reg_block[8].bit_block[1].dff_inst  (
    .clk(clk),
    .d(data_in[1]),
    .q(\registers[8] [1]),
    .wen(\reg_block[8].bit_block[0].write_enable )
  );
  DFF \reg_block[8].bit_block[2].dff_inst  (
    .clk(clk),
    .d(data_in[2]),
    .q(\registers[8] [2]),
    .wen(\reg_block[8].bit_block[0].write_enable )
  );
  DFF \reg_block[8].bit_block[3].dff_inst  (
    .clk(clk),
    .d(data_in[3]),
    .q(\registers[8] [3]),
    .wen(\reg_block[8].bit_block[0].write_enable )
  );
  DFF \reg_block[8].bit_block[4].dff_inst  (
    .clk(clk),
    .d(data_in[4]),
    .q(\registers[8] [4]),
    .wen(\reg_block[8].bit_block[0].write_enable )
  );
  DFF \reg_block[8].bit_block[5].dff_inst  (
    .clk(clk),
    .d(data_in[5]),
    .q(\registers[8] [5]),
    .wen(\reg_block[8].bit_block[0].write_enable )
  );
  DFF \reg_block[8].bit_block[6].dff_inst  (
    .clk(clk),
    .d(data_in[6]),
    .q(\registers[8] [6]),
    .wen(\reg_block[8].bit_block[0].write_enable )
  );
  DFF \reg_block[8].bit_block[7].dff_inst  (
    .clk(clk),
    .d(data_in[7]),
    .q(\registers[8] [7]),
    .wen(\reg_block[8].bit_block[0].write_enable )
  );
  DFF \reg_block[9].bit_block[0].dff_inst  (
    .clk(clk),
    .d(data_in[0]),
    .q(\registers[9] [0]),
    .wen(\reg_block[9].bit_block[0].write_enable )
  );
  DFF \reg_block[9].bit_block[1].dff_inst  (
    .clk(clk),
    .d(data_in[1]),
    .q(\registers[9] [1]),
    .wen(\reg_block[9].bit_block[0].write_enable )
  );
  DFF \reg_block[9].bit_block[2].dff_inst  (
    .clk(clk),
    .d(data_in[2]),
    .q(\registers[9] [2]),
    .wen(\reg_block[9].bit_block[0].write_enable )
  );
  DFF \reg_block[9].bit_block[3].dff_inst  (
    .clk(clk),
    .d(data_in[3]),
    .q(\registers[9] [3]),
    .wen(\reg_block[9].bit_block[0].write_enable )
  );
  DFF \reg_block[9].bit_block[4].dff_inst  (
    .clk(clk),
    .d(data_in[4]),
    .q(\registers[9] [4]),
    .wen(\reg_block[9].bit_block[0].write_enable )
  );
  DFF \reg_block[9].bit_block[5].dff_inst  (
    .clk(clk),
    .d(data_in[5]),
    .q(\registers[9] [5]),
    .wen(\reg_block[9].bit_block[0].write_enable )
  );
  DFF \reg_block[9].bit_block[6].dff_inst  (
    .clk(clk),
    .d(data_in[6]),
    .q(\registers[9] [6]),
    .wen(\reg_block[9].bit_block[0].write_enable )
  );
  DFF \reg_block[9].bit_block[7].dff_inst  (
    .clk(clk),
    .d(data_in[7]),
    .q(\registers[9] [7]),
    .wen(\reg_block[9].bit_block[0].write_enable )
  );
  assign \reg_block[0].bit_block[1].write_enable  = \reg_block[0].bit_block[0].write_enable ;
  assign \reg_block[0].bit_block[2].write_enable  = \reg_block[0].bit_block[0].write_enable ;
  assign \reg_block[0].bit_block[3].write_enable  = \reg_block[0].bit_block[0].write_enable ;
  assign \reg_block[0].bit_block[4].write_enable  = \reg_block[0].bit_block[0].write_enable ;
  assign \reg_block[0].bit_block[5].write_enable  = \reg_block[0].bit_block[0].write_enable ;
  assign \reg_block[0].bit_block[6].write_enable  = \reg_block[0].bit_block[0].write_enable ;
  assign \reg_block[0].bit_block[7].write_enable  = \reg_block[0].bit_block[0].write_enable ;
  assign \reg_block[10].bit_block[1].write_enable  = \reg_block[10].bit_block[0].write_enable ;
  assign \reg_block[10].bit_block[2].write_enable  = \reg_block[10].bit_block[0].write_enable ;
  assign \reg_block[10].bit_block[3].write_enable  = \reg_block[10].bit_block[0].write_enable ;
  assign \reg_block[10].bit_block[4].write_enable  = \reg_block[10].bit_block[0].write_enable ;
  assign \reg_block[10].bit_block[5].write_enable  = \reg_block[10].bit_block[0].write_enable ;
  assign \reg_block[10].bit_block[6].write_enable  = \reg_block[10].bit_block[0].write_enable ;
  assign \reg_block[10].bit_block[7].write_enable  = \reg_block[10].bit_block[0].write_enable ;
  assign \reg_block[11].bit_block[1].write_enable  = \reg_block[11].bit_block[0].write_enable ;
  assign \reg_block[11].bit_block[2].write_enable  = \reg_block[11].bit_block[0].write_enable ;
  assign \reg_block[11].bit_block[3].write_enable  = \reg_block[11].bit_block[0].write_enable ;
  assign \reg_block[11].bit_block[4].write_enable  = \reg_block[11].bit_block[0].write_enable ;
  assign \reg_block[11].bit_block[5].write_enable  = \reg_block[11].bit_block[0].write_enable ;
  assign \reg_block[11].bit_block[6].write_enable  = \reg_block[11].bit_block[0].write_enable ;
  assign \reg_block[11].bit_block[7].write_enable  = \reg_block[11].bit_block[0].write_enable ;
  assign \reg_block[12].bit_block[1].write_enable  = \reg_block[12].bit_block[0].write_enable ;
  assign \reg_block[12].bit_block[2].write_enable  = \reg_block[12].bit_block[0].write_enable ;
  assign \reg_block[12].bit_block[3].write_enable  = \reg_block[12].bit_block[0].write_enable ;
  assign \reg_block[12].bit_block[4].write_enable  = \reg_block[12].bit_block[0].write_enable ;
  assign \reg_block[12].bit_block[5].write_enable  = \reg_block[12].bit_block[0].write_enable ;
  assign \reg_block[12].bit_block[6].write_enable  = \reg_block[12].bit_block[0].write_enable ;
  assign \reg_block[12].bit_block[7].write_enable  = \reg_block[12].bit_block[0].write_enable ;
  assign \reg_block[13].bit_block[1].write_enable  = \reg_block[13].bit_block[0].write_enable ;
  assign \reg_block[13].bit_block[2].write_enable  = \reg_block[13].bit_block[0].write_enable ;
  assign \reg_block[13].bit_block[3].write_enable  = \reg_block[13].bit_block[0].write_enable ;
  assign \reg_block[13].bit_block[4].write_enable  = \reg_block[13].bit_block[0].write_enable ;
  assign \reg_block[13].bit_block[5].write_enable  = \reg_block[13].bit_block[0].write_enable ;
  assign \reg_block[13].bit_block[6].write_enable  = \reg_block[13].bit_block[0].write_enable ;
  assign \reg_block[13].bit_block[7].write_enable  = \reg_block[13].bit_block[0].write_enable ;
  assign \reg_block[14].bit_block[1].write_enable  = \reg_block[14].bit_block[0].write_enable ;
  assign \reg_block[14].bit_block[2].write_enable  = \reg_block[14].bit_block[0].write_enable ;
  assign \reg_block[14].bit_block[3].write_enable  = \reg_block[14].bit_block[0].write_enable ;
  assign \reg_block[14].bit_block[4].write_enable  = \reg_block[14].bit_block[0].write_enable ;
  assign \reg_block[14].bit_block[5].write_enable  = \reg_block[14].bit_block[0].write_enable ;
  assign \reg_block[14].bit_block[6].write_enable  = \reg_block[14].bit_block[0].write_enable ;
  assign \reg_block[14].bit_block[7].write_enable  = \reg_block[14].bit_block[0].write_enable ;
  assign \reg_block[15].bit_block[1].write_enable  = \reg_block[15].bit_block[0].write_enable ;
  assign \reg_block[15].bit_block[2].write_enable  = \reg_block[15].bit_block[0].write_enable ;
  assign \reg_block[15].bit_block[3].write_enable  = \reg_block[15].bit_block[0].write_enable ;
  assign \reg_block[15].bit_block[4].write_enable  = \reg_block[15].bit_block[0].write_enable ;
  assign \reg_block[15].bit_block[5].write_enable  = \reg_block[15].bit_block[0].write_enable ;
  assign \reg_block[15].bit_block[6].write_enable  = \reg_block[15].bit_block[0].write_enable ;
  assign \reg_block[15].bit_block[7].write_enable  = \reg_block[15].bit_block[0].write_enable ;
  assign \reg_block[1].bit_block[1].write_enable  = \reg_block[1].bit_block[0].write_enable ;
  assign \reg_block[1].bit_block[2].write_enable  = \reg_block[1].bit_block[0].write_enable ;
  assign \reg_block[1].bit_block[3].write_enable  = \reg_block[1].bit_block[0].write_enable ;
  assign \reg_block[1].bit_block[4].write_enable  = \reg_block[1].bit_block[0].write_enable ;
  assign \reg_block[1].bit_block[5].write_enable  = \reg_block[1].bit_block[0].write_enable ;
  assign \reg_block[1].bit_block[6].write_enable  = \reg_block[1].bit_block[0].write_enable ;
  assign \reg_block[1].bit_block[7].write_enable  = \reg_block[1].bit_block[0].write_enable ;
  assign \reg_block[2].bit_block[1].write_enable  = \reg_block[2].bit_block[0].write_enable ;
  assign \reg_block[2].bit_block[2].write_enable  = \reg_block[2].bit_block[0].write_enable ;
  assign \reg_block[2].bit_block[3].write_enable  = \reg_block[2].bit_block[0].write_enable ;
  assign \reg_block[2].bit_block[4].write_enable  = \reg_block[2].bit_block[0].write_enable ;
  assign \reg_block[2].bit_block[5].write_enable  = \reg_block[2].bit_block[0].write_enable ;
  assign \reg_block[2].bit_block[6].write_enable  = \reg_block[2].bit_block[0].write_enable ;
  assign \reg_block[2].bit_block[7].write_enable  = \reg_block[2].bit_block[0].write_enable ;
  assign \reg_block[3].bit_block[1].write_enable  = \reg_block[3].bit_block[0].write_enable ;
  assign \reg_block[3].bit_block[2].write_enable  = \reg_block[3].bit_block[0].write_enable ;
  assign \reg_block[3].bit_block[3].write_enable  = \reg_block[3].bit_block[0].write_enable ;
  assign \reg_block[3].bit_block[4].write_enable  = \reg_block[3].bit_block[0].write_enable ;
  assign \reg_block[3].bit_block[5].write_enable  = \reg_block[3].bit_block[0].write_enable ;
  assign \reg_block[3].bit_block[6].write_enable  = \reg_block[3].bit_block[0].write_enable ;
  assign \reg_block[3].bit_block[7].write_enable  = \reg_block[3].bit_block[0].write_enable ;
  assign \reg_block[4].bit_block[1].write_enable  = \reg_block[4].bit_block[0].write_enable ;
  assign \reg_block[4].bit_block[2].write_enable  = \reg_block[4].bit_block[0].write_enable ;
  assign \reg_block[4].bit_block[3].write_enable  = \reg_block[4].bit_block[0].write_enable ;
  assign \reg_block[4].bit_block[4].write_enable  = \reg_block[4].bit_block[0].write_enable ;
  assign \reg_block[4].bit_block[5].write_enable  = \reg_block[4].bit_block[0].write_enable ;
  assign \reg_block[4].bit_block[6].write_enable  = \reg_block[4].bit_block[0].write_enable ;
  assign \reg_block[4].bit_block[7].write_enable  = \reg_block[4].bit_block[0].write_enable ;
  assign \reg_block[5].bit_block[1].write_enable  = \reg_block[5].bit_block[0].write_enable ;
  assign \reg_block[5].bit_block[2].write_enable  = \reg_block[5].bit_block[0].write_enable ;
  assign \reg_block[5].bit_block[3].write_enable  = \reg_block[5].bit_block[0].write_enable ;
  assign \reg_block[5].bit_block[4].write_enable  = \reg_block[5].bit_block[0].write_enable ;
  assign \reg_block[5].bit_block[5].write_enable  = \reg_block[5].bit_block[0].write_enable ;
  assign \reg_block[5].bit_block[6].write_enable  = \reg_block[5].bit_block[0].write_enable ;
  assign \reg_block[5].bit_block[7].write_enable  = \reg_block[5].bit_block[0].write_enable ;
  assign \reg_block[6].bit_block[1].write_enable  = \reg_block[6].bit_block[0].write_enable ;
  assign \reg_block[6].bit_block[2].write_enable  = \reg_block[6].bit_block[0].write_enable ;
  assign \reg_block[6].bit_block[3].write_enable  = \reg_block[6].bit_block[0].write_enable ;
  assign \reg_block[6].bit_block[4].write_enable  = \reg_block[6].bit_block[0].write_enable ;
  assign \reg_block[6].bit_block[5].write_enable  = \reg_block[6].bit_block[0].write_enable ;
  assign \reg_block[6].bit_block[6].write_enable  = \reg_block[6].bit_block[0].write_enable ;
  assign \reg_block[6].bit_block[7].write_enable  = \reg_block[6].bit_block[0].write_enable ;
  assign \reg_block[7].bit_block[1].write_enable  = \reg_block[7].bit_block[0].write_enable ;
  assign \reg_block[7].bit_block[2].write_enable  = \reg_block[7].bit_block[0].write_enable ;
  assign \reg_block[7].bit_block[3].write_enable  = \reg_block[7].bit_block[0].write_enable ;
  assign \reg_block[7].bit_block[4].write_enable  = \reg_block[7].bit_block[0].write_enable ;
  assign \reg_block[7].bit_block[5].write_enable  = \reg_block[7].bit_block[0].write_enable ;
  assign \reg_block[7].bit_block[6].write_enable  = \reg_block[7].bit_block[0].write_enable ;
  assign \reg_block[7].bit_block[7].write_enable  = \reg_block[7].bit_block[0].write_enable ;
  assign \reg_block[8].bit_block[1].write_enable  = \reg_block[8].bit_block[0].write_enable ;
  assign \reg_block[8].bit_block[2].write_enable  = \reg_block[8].bit_block[0].write_enable ;
  assign \reg_block[8].bit_block[3].write_enable  = \reg_block[8].bit_block[0].write_enable ;
  assign \reg_block[8].bit_block[4].write_enable  = \reg_block[8].bit_block[0].write_enable ;
  assign \reg_block[8].bit_block[5].write_enable  = \reg_block[8].bit_block[0].write_enable ;
  assign \reg_block[8].bit_block[6].write_enable  = \reg_block[8].bit_block[0].write_enable ;
  assign \reg_block[8].bit_block[7].write_enable  = \reg_block[8].bit_block[0].write_enable ;
  assign \reg_block[9].bit_block[1].write_enable  = \reg_block[9].bit_block[0].write_enable ;
  assign \reg_block[9].bit_block[2].write_enable  = \reg_block[9].bit_block[0].write_enable ;
  assign \reg_block[9].bit_block[3].write_enable  = \reg_block[9].bit_block[0].write_enable ;
  assign \reg_block[9].bit_block[4].write_enable  = \reg_block[9].bit_block[0].write_enable ;
  assign \reg_block[9].bit_block[5].write_enable  = \reg_block[9].bit_block[0].write_enable ;
  assign \reg_block[9].bit_block[6].write_enable  = \reg_block[9].bit_block[0].write_enable ;
  assign \reg_block[9].bit_block[7].write_enable  = \reg_block[9].bit_block[0].write_enable ;
endmodule
